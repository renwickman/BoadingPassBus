Java 8 Date/Time API

Java has introduced a new Date and
Time API since Java 8.

The java.time package contains Java 8 Date
and Time classes.

java.time.LocalDate class
java.time.LocalTime class
java.time.LocalDateTime class
java.time.MonthDay class
java.time.OffsetTime class
java.time.OffsetDateTime class
java.time.Clock class
java.time.ZonedDateTime class
java.time.ZoneId class
java.time.ZoneOffset class
java.time.Year class
java.time.YearMonth class
java.time.Period class
java.time.Duration class
java.time.Instant class
java.time.DayOfWeek enum
java.time.Month enum
-------------------------------------------------------------------
There are two classes for formatting
date in java: DateFormat and SimpleDateFormat.

The java.text.DateFormat class
provides various methods to format
and parse date and time in java in
language independent manner.

The DateFormat class is an abstract class.
java.text.Format is the parent class and
java.text.SimpleDateFormat is the subclass
of java.text.DateFormat class.

In java, converting date into string is
called formatting and vice-versa parsing.
In other words, formatting means date to
string and parsing means string to date.
---------------------------------------------------
Java Clock class is used to provide
an access to the current instant,
date and time using a time zone.
It inherits the Object class.

Get Current Date
System.out.println(java.time.LocalDate.now());
----------------------------------------------------
Java ZonedDateTime class is an immutable
representation of a date-time with a
time-zone.

It inherits Object class and implements
the ChronoZonedDateTime interface.

ZonedDateTime class is used to store all
date and time fields, to a precision of
nanoseconds, and a time-zone with a zone
offset used to handle ambiguous local
date-times.
-----------------------------------------------------
Java ZoneId class specifies a time zone
identifier and provides a rule for
converting between an Instant and
a LocalDateTime.

It inherits Object class and implements the
Serializable interface.
------------------------------------------------------
java.sql.Date Methods

1)	void setTime(long time)	changes the current sql date to given time.
2)	Instant toInstant()	converts current sql date into Instant object.
3)	LocalDate toLocalDate()	converts current sql date into LocalDate object.
4)	String toString() converts this sql date object to a string.
5)	static Date valueOf(LocalDate date)	returns sql date object for the given LocalDate.
6)	static Date valueOf(String date) returns sql date object for the given String.
---------------------------------------------------------
java.util.Date Methods

1)	boolean after(Date date) tests if current date is after the given date.
2)	boolean before(Date date) tests if current date is before the given date.
3)	Object clone()	returns the clone object of current date.
4)	int compareTo(Date date) compares current date with given date.
5)	boolean equals(Date date) compares current date with given date for equality.
6)	static Date from(Instant instant) returns an instance of Date object from Instant date.
7)	long getTime() returns the time represented by this date object.
8)	int hashCode() returns the hash code value for this date object.
9)	void setTime(long time)	changes the current date and time to given time.
10)	Instant toInstant()	converts current date into Instant object.
11)	String toString() converts this date into Instant object.
-----------------------------------------------------------------------------
Java TimeZone Methods

1)  static String[] getAvailableIDs() is used to get all the available IDs supported.
2)  static TimeZone getDefault() is used to get the default TimeZone for this host.
3)  String getDisplayName()	is used to return a name of this time zone suitable
for presentation to the user in the default locale.
4)  String getID() is used to get the ID of this time zone
5)  int getOffset(long date) is used to return the offset of this time zone
from UTC at the specified date.
6)  void setID(String ID) is used to set the time zone ID
------------------------------------------------------------------------------

America/Los_Angeles
America/Louisville
America/New_York
America/Denver
America/Detroit
America/Indianapolis
America/Nassau
America/New_York
America/Phoenix

US/Eastern
US/Central
US/Pacific
US/Mountain

-------------------------------------------------------------------------------
Example:

import java.time.LocalDateTime; // Import the LocalDateTime class
import java.time.format.DateTimeFormatter; // Import the DateTimeFormatter class

public class MyClass {
  public static void main(String[] args) {
    LocalDateTime myDateObj = LocalDateTime.now();
    System.out.println("Before formatting: " + myDateObj);
    DateTimeFormatter myFormatObj = DateTimeFormatter.ofPattern("dd-MM-yyyy HH:mm:ss");

    String formattedDate = myDateObj.format(myFormatObj);
    System.out.println("After formatting: " + formattedDate);
  }
}

Output:

Before Formatting: 2020-10-30T14:07:26.508268
After Formatting: 30-10-2020 14:07:26
---------------------------------------------------------------------------------
The ofPattern() method accepts all sorts of values, if you want to display
the date and time in a different format.

For example:
yyyy-MM-dd	"1988-09-29"
dd/MM/yyyy	"29/09/1988"
dd-MMM-yyyy	"29-Sep-1988"
E, MMM dd yyyy	"Thu, Sep 29 1988"


import java.time.LocalDateTime;  // Import the LocalDateTime class
import java.time.format.DateTimeFormatter;  // Import the DateTimeFormatter class

public class MyClass {
  public static void main(String[] args) {
    LocalDateTime myDateObj = LocalDateTime.now();
    System.out.println("Before formatting: " + myDateObj);
    DateTimeFormatter myFormatObj = DateTimeFormatter.ofPattern("dd-MM-yyyy HH:mm:ss");

    String formattedDate = myDateObj.format(myFormatObj);
    System.out.println("After formatting: " + formattedDate);
  }
}

Output:

Before Formatting: 2020-10-30T14:11:18.021910
After Formatting: 30-10-2020 14:11:18
----------------------------------------------------------------------------------
Java supports three timezone constants for Eastern Standard Time
i.e. "EST", "America/New_York" and "EST5EDT".
It is very important to understand difference between them to
correctly utilize these constants for converting date or time in Eastern Standard Time values.

1. Difference between EST, EST5EDT and ‘America/New_York’
In the eastern part of the USA, timezone offsets are different during summer and winter.

During winter, time is EST. EST is always UTC-5 hours and without consideration for DST (daylight savings time).
During summer, time is EDT. EDT is UTC-4 hours and with DST.

To correctly represent time, during whole year, you should call it ET (Eastern Time)
which include EST and EDT both.

From timezone perspective, EST5EDT means either in EST or EDT.

It specifies that the zone uses a standard time of UT-5h called “EST”, a DST of UT-4h called “EDT”,
and switches between them annually on.

The time zone America/New_York is the same as EST5EDT for all dates after the ‘Uniform Time Act of 1966‘.
So if you are not using dates before 1966 in your application,
then you should use America/New_York timezone. It is preferred way.

Always, prefer to use 'America/New_York' for Eastern time. And use ‘ET’ in formatted timestamp.
It represents EST and EDT both.
----------------------------------------------------------------------------------
Format Date to String

Example of formatting Date to String representation:

SimpleDateFormat sdf = new SimpleDateFormat("dd/M/yyyy");
String date = sdf.format(new Date());
System.out.println(date); //Prints 26/10/2015
-----------------------------------------------------------------------------------
y   = year   (yy or yyyy)
M   = month  (MM)
d   = day in month (dd)
h   = hour (0-12)  (hh)
H   = hour (0-23)  (HH)
m   = minute in hour (mm)
s   = seconds (ss)
S   = milliseconds (SSS)
z   = time zone  text        (e.g. Pacific Standard Time...)
Z   = time zone, time offset (e.g. -0800)
------------------------------------------------------------------------------------
public static void main(String[] args) throws ParseException
{
    timeStampInJava8();
}

private static void timeStampInJava8() {

    //Method 1: Get current instant
    Instant instant = Instant.now();

    //Method 2: From java.sql.Timestamp
    Timestamp timestamp = new Timestamp(System.currentTimeMillis());
    Instant instant2 = timestamp.toInstant();

    //Method 3: From java.util.Date
    Date date = new Date();
    Instant instant3 = date.toInstant();

    System.out.println(instant);    //2018-07-14T08:10:44.270972700Z
    System.out.println(instant2);   //2018-07-14T08:14:37.943Z
    System.out.println(instant3);   //2018-07-14T08:14:37.943Z
}
----------------------------------------------------------------------------------

//Default pattern is yyyy-MM-dd

LocalDate today = LocalDate.parse("2019-03-29");
System.out.println(today);

//Custom pattern is yyyy/MM/dd

DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd-MMM-yyyy");
LocalDate date = LocalDate.parse("29-Mar-2019", formatter);
System.out.println(date);

Console:

2019-03-29
2019-03-29
----------------------------------------------------------------------------------
nextBoolean() reads a boolean value from the user
nextByte() reads a byte value from the user
nextDouble() reads a double value from the user
nextFloat()	reads a float value from the user
nextInt() reads a int value from the user
nextLine() reads a String value from the user
nextLong() reads a long value from the user
nextShort()	reads a short value from the user
-----------------------------------------------------------------------------------
import java.util.Scanner;  // Import the Scanner class

class MyClass {
  public static void main(String[] args) {
    Scanner myObj = new Scanner(System.in);  // Create a Scanner object
    System.out.println("Enter username");

    String userName = myObj.nextLine();  // Read user input
    System.out.println("Username is: " + userName);  // Output user input
  }
}
------------------------------------------------------------------------------------
import java.util.Scanner;

public class Exercise36 {

   public static void main(String[] args) {

        Scanner input = new Scanner(System.in);
        System.out.print("Input the latitude of coordinate 1: ");
        double lat1 = input.nextDouble();
        System.out.print("Input the longitude of coordinate 1: ");
        double lon1 = input.nextDouble();
        System.out.print("Input the latitude of coordinate 2: ");
        double lat2 = input.nextDouble();
        System.out.print("Input the longitude of coordinate 2: ");
        double lon2 = input.nextDouble();

        System.out.print("The distance between those points is: " + distance_Between_LatLong(lat1, lon1, lat2, lon2) + " km\n");
    }

    // Points will be converted to radians before calculation
    public static double distance_Between_LatLong(double lat1, double lon1, double lat2, double lon2) {
        lat1 = Math.toRadians(lat1);
        lon1 = Math.toRadians(lon1);
        lat2 = Math.toRadians(lat2);
        lon2 = Math.toRadians(lon2);

        double earthRadius = 6371.01 * 0.621; //Miles
        return Math.round(earthRadius * Math.acos(Math.sin(lat1)*Math.sin(lat2) + Math.cos(lat1)*Math.cos(lat2)*Math.cos(lon1 - lon2)));
    }
}
------------------------------------------------------------------------------------------
New York Latitude and Longitude (40.7648, -73.9808)
Los Angeles Latitude and Longitude (34.05223, -118.24368)
Detroit Latitude and Longitude (42.331427, -83.045754)
Phoenix Latitude and Longitude (33.448377, -112.074037)
Louisville Latitude and Longitude (38.252665, -85.758456)
Indianapolis Latitude and Longitude (39.76863, -86.15804)
-------------------------------------------------------------------------------------------
HashMap<String, Double, Double> cities = new HashMap<String, Double, Double> ();

cities.put("New York", 40.7648, -73.9808);
cities.put("Los Angeles", 34.05223, -118.24368);
cities.put("Detroit", 42.331427, -83.045754);
cities.put("Phoenix", 33.448377, -112.074037);
cities.put("Louisville", 38.252665, -85.758456);
cities.put("Indianapolis", 39.76863, -86.15804);
-------------------------------------------------------------------------------------------
speedOfBus = 50;
-------------------------------------------------------------------------------------------
public class Main {

    public static void main(String[] args) {

            Scanner input = new Scanner(System.in);
            System.out.print("Input the latitude of coordinate 1: ");
            double lat1 = input.nextDouble();
            System.out.print("Input the longitude of coordinate 1: ");
            double lon1 = input.nextDouble();
            System.out.print("Input the latitude of coordinate 2: ");
            double lat2 = input.nextDouble();
            System.out.print("Input the longitude of coordinate 2: ");
            double lon2 = input.nextDouble();

            System.out.print("The distance between those points is: " + distance_Between_LatLong(lat1, lon1, lat2, lon2) + " miles\n");
            System.out.println();

            double distance1 = distance_Between_LatLong(lat1, lon1, lat2, lon2)/50;
            double distance2 = Math.floor(distance_Between_LatLong(lat1, lon1, lat2, lon2)/50);

            System.out.println(distance1);
            System.out.println(distance2);
            System.out.println(distance1 - distance2);
            System.out.println(Math.ceil((distance1 - distance2) * 60.0));

        }

        // Points will be converted to radians before calculation
        public static double distance_Between_LatLong(double lat1, double lon1, double lat2, double lon2) {
            lat1 = Math.toRadians(lat1);
            lon1 = Math.toRadians(lon1);
            lat2 = Math.toRadians(lat2);
            lon2 = Math.toRadians(lon2);

            double earthRadius = 6371.01 * 0.621; //Miles
            return Math.round(earthRadius * Math.acos(Math.sin(lat1)*Math.sin(lat2) + Math.cos(lat1)*Math.cos(lat2)*Math.cos(lon1 - lon2)));
        }
    }
    -------------------------------------------------------------------------------------------
                HashMap<Integer, String> cities = new HashMap<Integer, String> ();
                    cities.put(1, "New York");
                    cities.put(2, "Los Angeles");
                    cities.put(3, "Detroit");
                    cities.put(4, "Phoenix");
                    cities.put(5, "Louisville");
                    cities.put(6, "Indianapolis");

                HashMap<Double, Double> location = new HashMap<Double, Double> ();
                    location.put(40.7648, -73.9808);
                    location.put(34.05223, -118.24368);
                    location.put(42.331427, -83.045754);
                    location.put(33.448377, -112.074037);
                    location.put(38.252665, -85.758456);
                    location.put(39.76863, -86.15804);

                List<Location> list = new ArrayList<>();
                list.add(new Location(1, "New York", 40.7648, -73.9808));
                list.add(new Location(1, "Los Angeles", 34.05223, -118.24368));
                list.add(new Location(1, "Detroit", 42.331427, -83.045754));
                list.add(new Location(1, "Phoenix", 33.448377, -112.074037));
                list.add(new Location(1, "Louisville", 38.252665, -85.758456));
                list.add(new Location(1, "Indianapolis", 39.76863, -86.15804));
    -------------------------------------------------------------------------------------------
    public class TimeZoneConversionExample1 {

    	public static void main(String[] args) {
    		//Getting Calendar Instance
    		Calendar calendar = Calendar.getInstance();
    		Date date = calendar.getTime();

    		//Getting DateFormat Instance
    		DateFormat dateFormat = new SimpleDateFormat("MM/dd/yyyy hh:mm");

    		//Setting Time for Europe/London
    		dateFormat.setTimeZone(TimeZone.getTimeZone("Europe/London"));
    		System.out.println("Time in Europe::");
    		System.out.println(dateFormat.format(date));

    		//Setting Time for Asia/Calcutta
    		dateFormat.setTimeZone(TimeZone.getTimeZone("Asia/Calcutta"));
    		System.out.println("Time in Asia::");
    		System.out.println(dateFormat.format(date));
    	}
    }

    Output:
    Time in Europe::
    08/12/2019 08:35
    Time in Asia::
    08/12/2019 01:05
    -------------------------------------------------------------------------------------------
            denverTime.add(Calendar.HOUR, 3);
            denverTime.add(Calendar.MINUTE, -5);
            denverTime.add(Calendar.YEAR, -10);
    -------------------------------------------------------------------------------------------
            Calendar localTime = Calendar.getInstance();

            int hour = localTime.get(Calendar.HOUR);
            int minute = localTime.get(Calendar.MINUTE);
            int year = localTime.get(Calendar.YEAR);

            // Print the local time
            System.out.printf("Local time: %02d:%02d %02d\n", hour, minute, year);

            // Create a calendar object for representing a Denver time zone.
            Calendar denverTime = new GregorianCalendar(TimeZone.getTimeZone("America/Denver"));
            denverTime.setTimeInMillis(localTime.getTimeInMillis());
            hour = denverTime.get(Calendar.HOUR);
            minute = denverTime.get(Calendar.MINUTE);
            year = denverTime.get(Calendar.YEAR);

            System.out.printf("Denver time: %02d:%02d %02d\n", hour, minute, year);

            // Create a calendar object for representing a Indianapolis time zone.
            Calendar indianapolisTime = new GregorianCalendar(TimeZone.getTimeZone("America/Indianapolis"));
            indianapolisTime.setTimeInMillis(localTime.getTimeInMillis());
            hour = indianapolisTime.get(Calendar.HOUR);
            minute = indianapolisTime.get(Calendar.MINUTE);
            year = indianapolisTime.get(Calendar.YEAR);

            System.out.printf("Indianapolis time: %02d:%02d %02d\n", hour, minute, year);

            Output:

            Local time: 00:11 2020
            Denver time: 11:11 2020
            Indianapolis time: 01:11 2020
    -------------------------------------------------------------------------------------------
     TimeZone pst = TimeZone.getTimeZone("America/Los_Angeles");
            Calendar calendar = new GregorianCalendar();
            calendar.setTimeZone(pst);
            System.out.println(pst.getID());
            System.out.println("Hour at Los Angeles= " + calendar.get(Calendar.HOUR_OF_DAY));
    //        System.out.println("Minute at Los Angeles= " + calendar.get(Calendar.MINUTE));

            calendar.add(Calendar.HOUR, +5);
    //        calendar.add(Calendar.MINUTE, +30);
            System.out.println("Hour at Los Angeles= " + calendar.get(Calendar.HOUR_OF_DAY));

            TimeZone est = TimeZone.getTimeZone("America/New_York");
    -------------------------------------------------------------------------------------------
            //create 1st calendar
            TimeZone pst = TimeZone.getTimeZone("PST");
            Calendar cal = Calendar.getInstance(pst);

            //create 2nd calendar
            TimeZone cst = TimeZone.getTimeZone("CST");
            Calendar cal2 = Calendar.getInstance(cst);

            System.out.println("PST: " + cal.getTimeZone().getDisplayName());
            System.out.println("CST: " + cal2.getTimeZone().getDisplayName());

            //Getting Calendar Instance
            Calendar calendar = Calendar.getInstance();
            Date date = calendar.getTime();

            //Getting DateFormat Instance
            DateFormat dateFormat = new SimpleDateFormat("MM/dd/yyyy hh:mm");

            //Setting Time for Los Angeles
            dateFormat.setTimeZone(TimeZone.getTimeZone("America/Los_Angeles"));
            System.out.println("Time in Los Angeles::");
            System.out.println(dateFormat.format(date));

            //Setting Time for New York
            dateFormat.setTimeZone(TimeZone.getTimeZone("America/New_York"));
            System.out.println("Time in New York::");
            System.out.println(dateFormat.format(date));

            Output:
            PST: Pacific Standard Time
            CST: Central Standard Time
            Time in Los Angeles::
            11/01/2020 12:55
            Time in New York::
            11/01/2020 03:55
    -------------------------------------------------------------------------------------------
    java.util.TimeZone.setID() Method
    The setID(String ID) method is used to set the time zone ID.
    This does not change any other data in the time zone object.

    java.util.TimeZone.getID() Method
    The getID() method is used to get the ID of this time zone.

    // create time zone object
    TimeZone timezone = TimeZone.getTimeZone("Europe/Paris");

    // checking ID of this time zone
    System.out.println("ID value is :" + timezone.getID());

    //Output: ID value is :Europe/Paris
    -------------------------------------------------------------------------------------------
    private static void log(String[] availableIDs) {

                System.out.println("\nHere are all list of timezones for your reference:");
                for (String temp : availableIDs) {
                    System.out.println(temp);
                }
            }
    -------------------------------------------------------------------------------------------

            TimeZone pst = TimeZone.getTimeZone("PST");
            Calendar cal = Calendar.getInstance();

            Date date = cal.getTime();
            System.out.println(pst.getID());
            cal.setTimeZone(pst);

            cal.add(Calendar.HOUR, 2);
            cal.add(Calendar.DATE, 5);
            System.out.println(cal.getTime());

            TimeZone est = TimeZone.getTimeZone("EST");
            System.out.println(est.getID());
            cal.setTimeZone(est);
            cal.add(Calendar.HOUR, -4);
            cal.add(Calendar.DATE, 10);
            System.out.println(cal.getTime());

            System.out.println("EST: " + cal.getTimeZone().getDisplayName());

    -------------------------------------------------------------------------------------------
    America/Los_Angeles (UTC-07:00)
    America/Denver (UTC-06:00)

    US/Eastern (UTC-04:00)
    US/Central (UTC-05:00)
    US/Mountain (UTC-06:00)
    US/Pacific (UTC-07:00)
    US/Alaska (UTC-08:00)
    US/Hawaii (UTC-10:00)
    -------------------------------------------------------------------------------------------
            String dateInString = "11-01-2020 05:01 PM";
            LocalDateTime ldt = LocalDateTime.parse(dateInString, DateTimeFormatter.ofPattern(DATE_FORMAT));

            ZoneId chicagoZoneId = ZoneId.of("America/Chicago");
            System.out.println("TimeZone : " + chicagoZoneId);

            //LocalDateTime + ZoneId = ZonedDateTime
            ZonedDateTime chicagoZonedDateTime = ldt.atZone(chicagoZoneId);
            System.out.println("Date (Chicago) : " + chicagoZonedDateTime);

            ZoneId newYokZoneId = ZoneId.of("America/New_York");
            System.out.println("TimeZone : " + newYokZoneId);

            ZonedDateTime nyDateTime = chicagoZonedDateTime.withZoneSameInstant(newYokZoneId);
            System.out.println("Date (New York) : " + nyDateTime);

            DateTimeFormatter format = DateTimeFormatter.ofPattern(DATE_FORMAT);
            System.out.println("\n---DateTimeFormatter---");
            System.out.println("Date (Chicago) : " + format.format(chicagoZonedDateTime));
            System.out.println("Date (New York) : " + format.format(nyDateTime));

    -------------------------------------------------------------------------------------------
    ZonedDateTime class is used to store all
    date and time fields, to a precision of
    nanoseconds, and a time-zone with a zone
    offset used to handle ambiguous local
    date-times.

        //ZonedDateTime class is used to store all
        //date and time fields, to a precision of
        //nanoseconds, and a time-zone with a zone
        //offset used to handle ambiguous local
        //date-times.

        LocalDate represents a date (year, month, day (yyyy-MM-dd))

        LocalTime represents a time (hour, minute, second and nanoseconds (HH-mm-ss-ns))

        LocalDateTime represents both a date and a time (yyyy-MM-dd-HH-mm-ss-ns)

        DateTimeFormatter is a Formatter for displaying and parsing date-time objects

    -------------------------------------------------------------------------------------------
    private static final String DATE_FORMAT = "MM-dd-yyyy hh:mm a";

        public static void main(String[] args)  throws ParseException {

            String dateInString = "01-22-2020 06:00 PM";
            LocalDateTime ldt = LocalDateTime.parse(dateInString, DateTimeFormatter.ofPattern(DATE_FORMAT));

            ZoneId losAngelesZoneId = ZoneId.of("America/Los_Angeles");
            System.out.println("TimeZone : " + losAngelesZoneId);

            //LocalDateTime + ZoneId = ZonedDateTime
            ZonedDateTime laZonedDateTime = ldt.atZone(losAngelesZoneId);
            System.out.println("Date (Los Angeles) : " + laZonedDateTime);


            //ZoneId for New_York
            ZoneId newYokZoneId = ZoneId.of("America/New_York");
            System.out.println("TimeZone : " + newYokZoneId);

            ZonedDateTime nyDateTime = laZonedDateTime.withZoneSameInstant(newYokZoneId);
            System.out.println("Date (New York) : " + nyDateTime);

            DateTimeFormatter format = DateTimeFormatter.ofPattern(DATE_FORMAT);
            System.out.println("\n---DateTimeFormatter---");
            System.out.println("Date (Los Angeles) : " + format.format(laZonedDateTime));
            System.out.println("Date (New York) : " + format.format(nyDateTime));
        }
------------------------------------------------------------------------------------------------------------------------
        if (passenger.getOrigin() == "1") {
            lat1 = Math.toRadians(34.05223);
            lon1 = Math.toRadians(-118.24368);
        } else if (passenger.getOrigin() == "2") {
            lat1 = Math.toRadians(40.7648);
            lon1 = Math.toRadians(-73.9808);
        } else if (passenger.getOrigin() == "3") {
            lat1 = Math.toRadians(42.331427);
            lon1 = Math.toRadians(-83.045754);
        }

        if (passenger.getDestination() == "1") {
            lat2 = Math.toRadians(34.05223);
            lon2 = Math.toRadians(-118.24368);
        } else if (passenger.getDestination() == "2") {
            lat2 = Math.toRadians(40.7648);
            lon2 = Math.toRadians(-73.9808);
        } else if (passenger.getDestination() == "3") {
            lat1 = Math.toRadians(42.331427);
            lon1 = Math.toRadians(-83.045754);
        }
----------------------------------------------------------------------------------------------------------------------

        /*if (enterDepart().equals("1")) {
            Calendar newYorkTime = new GregorianCalendar(TimeZone.getTimeZone("America/New_york"));
//            TimeZone timezone = TimeZone.getTimeZone("America/New_york");

            ZoneId nyZoneId = ZoneId.of("America/New_york");

            ZonedDateTime nyZonedDateTime = ldt.atZone(nyZoneId);

            newYorkTime.add(Calendar.HOUR, (int) hours);
            newYorkTime.add(Calendar.MINUTE, (int) minutes);

            ZonedDateTime endZoneTime = nyZonedDateTime.withZoneSameInstant(nyZoneId);

            endDateTime = nyZonedDateTime.withZoneSameInstant(nyZoneId);
            DateFormat dateFormat = new SimpleDateFormat("mm-dd-yyyy hh:mm");
            strDate = dateFormat.format(endDateTime);

        } else if (enterDepart().equals("2")) {
            //Calendar into Los Angeles TimeZone
            Calendar laTime = new GregorianCalendar(TimeZone.getTimeZone("America/Los_angeles"));
//            TimeZone timezone = TimeZone.getTimeZone("America/Los_angeles");

            ZoneId laZoneId = ZoneId.of("America/Los_angeles");

            ZonedDateTime laZonedDateTime = ldt.atZone(laZoneId);

            //Make String into a Date/Time
            laTime.add(Calendar.HOUR, (int) hours);
            laTime.add(Calendar.MINUTE, (int) minutes);

            ZonedDateTime endZoneTime = laZonedDateTime.withZoneSameInstant(laZoneId);

            endDateTime = laZonedDateTime.withZoneSameInstant(laZoneId);
            DateFormat dateFormat = new SimpleDateFormat("mm-dd-yyyy hh:mm");
            strDate = dateFormat.format(endDateTime);
        }  else if (enterDepart().equals("3")) {
            Calendar detTime = new GregorianCalendar(TimeZone.getTimeZone("America/Detroit"));
//            TimeZone timezone = TimeZone.getTimeZone("America/Detroit");

            ZoneId detZoneId = ZoneId.of("America/Detroit");

            ZonedDateTime detZonedDateTime = ldt.atZone(detZoneId);

            detTime.add(Calendar.HOUR, (int) hours);
            detTime.add(Calendar.MINUTE, (int) minutes);

            ZonedDateTime endZoneTime = detZonedDateTime.withZoneSameInstant(detZoneId);
            //Make String into a Date/Time
            endDateTime = detZonedDateTime.withZoneSameInstant(detZoneId);
            DateFormat dateFormat = new SimpleDateFormat("mm-dd-yyyy hh:mm");
            strDate = dateFormat.format(endDateTime);
        } else if (enterDepart().equals("4")) {
            Calendar phoenixTime = new GregorianCalendar(TimeZone.getTimeZone("America/Detroit"));
//            TimeZone timezone = TimeZone.getTimeZone("America/Phoenix");

            ZoneId detZoneId = ZoneId.of("America/Phoenix");

            ZonedDateTime phoenixZonedDateTime = ldt.atZone(detZoneId);

            phoenixTime.add(Calendar.HOUR, (int) hours);
            phoenixTime.add(Calendar.MINUTE, (int) minutes);

            ZonedDateTime endZoneTime = phoenixZonedDateTime.withZoneSameInstant(detZoneId);
            //Make String into a Date/Time
            endDateTime = phoenixZonedDateTime.withZoneSameInstant(detZoneId);
            DateFormat dateFormat = new SimpleDateFormat("mm-dd-yyyy hh:mm");
            strDate = dateFormat.format(endDateTime);
        } else if (enterDepart().equals("5")) {
            Calendar louTime = new GregorianCalendar(TimeZone.getTimeZone("America/Louisville"));
//            TimeZone timezone = TimeZone.getTimeZone("America/Louisville");

            ZoneId louZoneId = ZoneId.of("America/Louisville");

            ZonedDateTime louZonedDateTime = ldt.atZone(louZoneId);

            louTime.add(Calendar.HOUR, (int) hours);
            louTime.add(Calendar.MINUTE, (int) minutes);

            ZonedDateTime endZoneTime = louZonedDateTime.withZoneSameInstant(louZoneId);
            //Make String into a Date/Time
            endDateTime = louZonedDateTime.withZoneSameInstant(louZoneId);
            DateFormat dateFormat = new SimpleDateFormat("mm-dd-yyyy hh:mm");
            strDate = dateFormat.format(endDateTime);
        } else if (enterDepart().equals("6")) {
            Calendar indTime = new GregorianCalendar(TimeZone.getTimeZone("America/Indiana/Indianapolis"));
//            TimeZone timezone = TimeZone.getTimeZone("America/Indiana/Indianapolis");

            ZoneId indZoneId = ZoneId.of("America/Indiana/Indianapolis");

            ZonedDateTime indZonedDateTime = ldt.atZone(indZoneId);

            indTime.add(Calendar.HOUR, (int) hours);
            indTime.add(Calendar.MINUTE, (int) minutes);

            ZonedDateTime endZoneTime = indZonedDateTime.withZoneSameInstant(indZoneId);
            //Make String into a Date/Time
            endDateTime = indZonedDateTime.withZoneSameInstant(indZoneId);
            DateFormat dateFormat = new SimpleDateFormat("mm-dd-yyyy hh:mm");
            strDate = dateFormat.format(endDateTime);
                    return strDate;
        }*/

                /*
                System.out.println("Where are you looking to go?");
                System.out.println("1. America/New_York");
                System.out.println("2. America/Los_Angeles");
                System.out.println("3. America/Detroit");
                System.out.println("4. America/Phoenix");
                System.out.println("5. America/Louisville");
                System.out.println("6. America/Indianapolis");
                switch (scanArrive.nextLine()){
                    case "1":
                        passenger.setDestination("America/New_York");
                        lat2 = Math.toRadians(40.7648);
                        lon2 = Math.toRadians(-73.9808);
                        break;
                    case "2":
                        passenger.setDestination("America/Los_Angeles");
                        lat2 = Math.toRadians(34.05223);
                        lon2 = Math.toRadians(-118.24368);
                        break;
                    case "3":
                        passenger.setDestination("America/Detroit");
                        lat2 = Math.toRadians(42.331427);
                        lon2 = Math.toRadians(-83.045754);
                        break;
                    case "4":
                        passenger.setDestination("America/Phoenix");
                        lat2 = Math.toRadians(33.448377);
                        lon2 = Math.toRadians(-112.074037);
                        break;
                    case "5":
                        passenger.setDestination("America/Louisville");
                        lat2 = Math.toRadians(38.252665);
                        lon2 = Math.toRadians(-85.758456);
                        break;
                    case "6":
                        passenger.setDestination("America/Indiana/Indianapolis");
                        lat2 = Math.toRadians(39.76863);
                        lon2 = Math.toRadians(-86.15804);
                        break;
                    default:
                        System.out.printf("%s ... you made an invalid entry", passenger.getName());
                }*/